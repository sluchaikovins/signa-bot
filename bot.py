import random
import time
import aiohttp
import asyncio
import json
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto

API_TOKEN = '8114029445:AAEz00_sHv9VhtfgdT2S3cK6hbJtiJ9dxSM'
DONATEPAY_API_KEY = 'MvZrwKfTVfiFWIIYZVptsNgAXMCWh698NkvLBKzBOiIfLbBZyatrEKV4uYv9'
ADMIN_ID = 1284710177  # –¢–≤–æ–π Telegram ID

DATA_FILE = 'orders_data.json'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

PROMOCODES = {'cozyfan': 20}
user_states = {}
orders = []

# --- –†–∞–±–æ—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º/–∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö ---

def save_data():
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump({'orders': orders, 'user_states': user_states}, f, ensure_ascii=False, indent=2)

def load_data():
    global orders, user_states
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            orders = data.get('orders', [])
            user_states = data.get('user_states', {})
    except FileNotFoundError:
        orders = []
        user_states = {}

load_data()

def generate_unique_code():
    return str(random.randint(1000, 9999))

# --- –ö–æ–º–∞–Ω–¥—ã ---

@dp.message_handler(commands=['start'])
async def cmd_start(msg: types.Message):
    kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("üîπ –ó–∞–∫–∞–∑–∞—Ç—å —Å–∏–≥–Ω—É", callback_data='order'),
        InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data='history'),
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')
    )
    await msg.answer("–ö–ª–∏–∫–∞–π –∫–Ω–æ–ø–æ—á–∫–∏ üëá", reply_markup=kb)

@dp.message_handler(commands=['admin'])
async def admin_panel(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return await msg.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await send_admin_orders_list(msg.from_user.id)

async def send_admin_orders_list(admin_id):
    if not orders:
        await bot.send_message(admin_id, "üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    kb = InlineKeyboardMarkup(row_width=2)
    for i, o in enumerate(orders, 1):
        paid_status = "‚úÖ" if o['paid'] else "‚ùå"
        text = f"–ó–∞–∫–∞–∑ {i} {paid_status}"
        kb.insert(InlineKeyboardButton(text, callback_data=f"admin_order_{i-1}"))
    await bot.send_message(admin_id, "üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:", reply_markup=kb)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ ---

@dp.callback_query_handler(lambda c: c.data in ['order', 'history', 'help'])
async def main_menu(c: types.CallbackQuery):
    await c.message.delete()
    if c.data == 'order':
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("cozzych", callback_data='from_cozzych'))
        await bot.send_message(c.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–∏–≥–Ω—É üëá", reply_markup=kb)
    elif c.data == 'history':
        user_orders = [o for o in orders if o['user_id'] == c.from_user.id]
        if not user_orders:
            await bot.send_message(c.from_user.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            await c.answer()
            return
        text = "üìù –¢–≤–æ–∏ –∑–∞–∫–∞–∑—ã:\n\n"
        for i, o in enumerate(user_orders, 1):
            paid = "‚úÖ –û–ø–ª–∞—á–µ–Ω" if o['paid'] else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω"
            text += f"{i}. –°—Ç–∏–ª—å: {o['style']}, –¶–µ–Ω–∞: {o['price']}‚ÇΩ, –°—Ç–∞—Ç—É—Å: {paid}\n"
        await bot.send_message(c.from_user.id, text)
    else:
        await bot.send_message(c.from_user.id, "–ù–∞–∂–º–∏ '–ó–∞–∫–∞–∑–∞—Ç—å —Å–∏–≥–Ω—É' –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")
    await c.answer()

@dp.callback_query_handler(lambda c: c.data == 'from_cozzych')
async def choose_variant(c: types.CallbackQuery):
    await c.message.delete()
    kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("–û—Å–≤–µ—â–µ–Ω–∏–µ 1 ‚Äî 100‚ÇΩ", callback_data='style_1'),
        InlineKeyboardButton("–û—Å–≤–µ—â–µ–Ω–∏–µ 2 ‚Äî 120‚ÇΩ", callback_data='style_2')
    )
    await bot.send_message(c.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å üëá", reply_markup=kb)
    await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('style_'))
async def ask_for_text(c: types.CallbackQuery):
    await c.message.delete()
    uid = c.from_user.id
    style = c.data
    price = 100 if style == 'style_1' else 120
    user_states[uid] = {'stage': 'waiting_text', 'style': style, 'price': price}
    await bot.send_message(uid, "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç (‚â§64 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ —Ñ–æ—Ç–æ.")
    await c.answer()

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get('stage') == 'waiting_text', content_types=['text', 'photo'])
async def handle_content(m: types.Message):
    uid = m.from_user.id
    st = user_states[uid]
    if m.text and len(m.text) > 64:
        return await m.reply("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤.")
    if m.photo:
        photo = m.photo[-1]
        st['content'] = {'type': 'photo', 'file_id': photo.file_id}
    else:
        st['content'] = {'type': 'text', 'text': m.text}
    st['stage'] = 'promo'
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data='enter_promo'),
        InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_promo')
    )
    await m.reply("–ï—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data in ['enter_promo', 'skip_promo'])
async def promo_step(c: types.CallbackQuery):
    await c.message.delete()
    uid = c.from_user.id
    if c.data == 'enter_promo':
        user_states[uid]['stage'] = 'waiting_promo'
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_promo'))
        await bot.send_message(uid, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=kb)
    else:
        price = user_states[uid]['price']
        await show_summary(uid, price)
        await ask_payment(uid, price)
    await c.answer()

@dp.callback_query_handler(lambda c: c.data == 'back_to_promo')
async def back_to_promo(c: types.CallbackQuery):
    await c.message.delete()
    uid = c.from_user.id
    user_states[uid]['stage'] = 'promo'
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data='enter_promo'),
        InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_promo')
    )
    await bot.send_message(uid, "–ï—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?", reply_markup=kb)
    await c.answer()

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get('stage') == 'waiting_promo')
async def apply_promo(m: types.Message):
    uid = m.from_user.id
    st = user_states[uid]
    promo = m.text.strip().lower()
    disc = PROMOCODES.get(promo)
    if disc:
        final_price = max(st['price'] - disc, 0)
        st['final_price'] = final_price
        await m.reply(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥: ‚àí{disc}‚ÇΩ ‚Üí {final_price}‚ÇΩ")
        st['stage'] = 'waiting_payment'
        await show_summary(uid, final_price)
        await ask_payment(uid, final_price)
    else:
        await m.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_promo'))
        await m.reply("–£ —Ç–µ–±—è –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥:", reply_markup=kb)

async def show_summary(uid, price):
    st = user_states[uid]
    name = "–û—Å–≤–µ—â–µ–Ω–∏–µ 1" if st['style'] == 'style_1' else "–û—Å–≤–µ—â–µ–Ω–∏–µ 2"
    cont = "–¢–µ–∫—Å—Ç" if st['content']['type'] == 'text' else "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    await bot.send_message(uid,
                           f"‚úÖ –ó–∞–∫–∞–∑:\n‚Ä¢ –°—Ç–∏–ª—å: {name}\n‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç: {cont}\n‚Ä¢ –¶–µ–Ω–∞: {price}‚ÇΩ")

async def ask_payment(uid, amount):
    st = user_states[uid]
    code = generate_unique_code()
    st.update({
        'payment_code': code,
        'payment_amount': amount,
        'payment_start': int(time.time()),
        'stage': 'waiting_payment',
        'paid': False
    })
    username = (await bot.get_chat(uid)).username or uid
    orders.append({
        'user_id': uid,
        'username': username,
        'style': "–û—Å–≤–µ—â–µ–Ω–∏–µ 1" if st['style'] == 'style_1' else "–û—Å–≤–µ—â–µ–Ω–∏–µ 2",
        'content': st['content'],
        'price': amount,
        'code': code,
        'paid': False,
        'done': False,
        'timestamp': int(time.time())
    })
    save_data()

    donate_url = f"https://donatepay.ru/checkout/{code}"

    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data='confirm_manual')
    )
    text = (
        f"üí∏ –û–ø–ª–∞—Ç–∏—Ç–µ {amount}‚ÇΩ –Ω–∞ "
        f'<a href="{donate_url}">DonatePay</a>\n'
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {code}\n‚è≥ 10 –º–∏–Ω"
    )
    await bot.send_message(
    uid,
    f"üí∏ –û–ø–ª–∞—Ç–∏—Ç–µ <b>{amount}‚ÇΩ</b> –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:\n\n"
    f"<a href='https://new.donatepay.ru/@1393914'>DonatePay</a>\n\n"
    f"üìù –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ–Ω–∞—Ç—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: ‚ö†Ô∏è <b>{code}</b> ‚ö†Ô∏è\n\n"
    f"‚è≥ –ù–∞ –æ–ø–ª–∞—Ç—É –¥–∞–µ—Ç—Å—è 10 –º–∏–Ω—É—Ç. –ü–æ—Å–ª–µ 10 –º–∏–Ω—É—Ç –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–∞.\n"
    f"‚è∞ –Ø –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–ø–ª–∞—Ç—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥.",
    parse_mode='HTML'
)



@dp.callback_query_handler(lambda c: c.data == 'confirm_manual')
async def manual_confirm(c: types.CallbackQuery):
    await c.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    await c.message.delete()

# --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã ---

async def check_all_payments():
    async with aiohttp.ClientSession() as session:
        async with session.get("https://donatepay.ru/api/v1/donates", params={'token': DONATEPAY_API_KEY}) as resp:
            if resp.status != 200:
                print("–û—à–∏–±–∫–∞ DonatePay:", resp.status)
                return
            data = await resp.json()
    for donation in data.get('data', []):
        com = donation.get('comment') or ''
        amt = float(donation.get('sum', 0))
        tstamp = int(donation.get('created_at', 0))
        for o in orders:
            uid = o['user_id']
            st = user_states.get(uid, {})
            if (not o['paid'] and
                o['code'] in com and
                amt >= o['price'] and
                tstamp >= o['timestamp']):
                o['paid'] = True
                st['paid'] = True
                st['stage'] = 'paid'
                save_data()
                await bot.send_message(uid, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª—é —Å–∏–≥–Ω—É.")
                await bot.send_message(ADMIN_ID, f"‚ö° –ó–∞–∫–∞–∑ #{orders.index(o)+1} –æ–ø–ª–∞—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{o['username']}.")
                break

# --- –ê–¥–º–∏–Ω: –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ ---

@dp.callback_query_handler(lambda c: c.data.startswith('admin_order_'))
async def admin_order_detail(c: types.CallbackQuery):
    await c.message.delete()
    admin_id = c.from_user.id
    if admin_id != ADMIN_ID:
        return await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    idx = int(c.data.split('_')[-1])
    if idx < 0 or idx >= len(orders):
        return await c.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    order = orders[idx]

    paid = "‚úÖ –û–ø–ª–∞—á–µ–Ω" if order['paid'] else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω"
    done = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω" if order.get('done', False) else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"
    cont = order['content']

    text = (
        f"–ó–∞–∫–∞–∑ #{idx+1}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{order['username']}\n"
        f"–°—Ç–∏–ª—å: {order['style']}\n"
        f"–¶–µ–Ω–∞: {order['price']}‚ÇΩ\n"
        f"–û–ø–ª–∞—Ç–∞: {paid}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {done}\n"
        f"–ö–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {order['code']}\n"
        f"–ö–æ–Ω—Ç–µ–Ω—Ç:\n"
    )
    if cont['type'] == 'text':
        text += cont['text']
        media = None
    else:
        text += "[–§–æ—Ç–æ]"
        media = InputMediaPhoto(media=cont['file_id'])

    kb = InlineKeyboardMarkup(row_width=2)
    if not order['paid']:
        kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_cancel_{idx}"))
    else:
        if not order.get('done', False):
            kb.add(InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º", callback_data=f"admin_done_{idx}"))
        kb.add(InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω—É", callback_data=f"admin_send_{idx}"))
    kb.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data='admin_back'))

    if media:
        await bot.send_photo(admin_id, cont['file_id'], caption=text, reply_markup=kb)
    else:
        await bot.send_message(admin_id, text, reply_markup=kb)
    await c.answer()

@dp.callback_query_handler(lambda c: c.data == 'admin_back')
async def admin_back(c: types.CallbackQuery):
    await c.message.delete()
    await send_admin_orders_list(c.from_user.id)
    await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('admin_done_'))
async def admin_mark_done(c: types.CallbackQuery):
    idx = int(c.data.split('_')[-1])
    order = orders[idx]
    if order.get('done', False):
        await c.answer("–£–∂–µ –æ—Ç–º–µ—á–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º", show_alert=True)
        return
    orders[idx]['done'] = True
    save_data()
    await c.answer("–û—Ç–º–µ—Ç–∏–ª –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
    await c.message.delete()
    await send_admin_orders_list(c.from_user.id)

@dp.callback_query_handler(lambda c: c.data.startswith('admin_cancel_'))
async def admin_cancel_order(c: types.CallbackQuery):
    idx = int(c.data.split('_')[-1])
    order = orders[idx]
    if order['paid']:
        await c.answer("–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑", show_alert=True)
        return
    orders.pop(idx)
    save_data()
    await c.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω")
    await c.message.delete()
    await send_admin_orders_list(c.from_user.id)

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ ---

sending_signs = {}  # user_id -> order_idx

@dp.callback_query_handler(lambda c: c.data.startswith('admin_send_'))
async def admin_send_sign_request(c: types.CallbackQuery):
    idx = int(c.data.split('_')[-1])
    sending_signs[c.from_user.id] = idx
    await c.message.delete()
    await bot.send_message(c.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–∏–≥–Ω—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await c.answer()

@dp.message_handler(lambda m: m.from_user.id in sending_signs)
async def admin_send_sign_handle(m: types.Message):
    admin_id = m.from_user.id
    idx = sending_signs[admin_id]
    order = orders[idx]

    try:
        if m.photo:
            photo = m.photo[-1]
            await bot.send_photo(order['user_id'], photo.file_id, caption="–í–∞—à–∞ —Å–∏–≥–Ω–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            await m.reply("–°–∏–≥–Ω–∞ —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        elif m.text:
            await bot.send_message(order['user_id'], f"–í–∞—à–∞ —Å–∏–≥–Ω–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{m.text}")
            await m.reply("–¢–µ–∫—Å—Ç–æ–≤–∞—è —Å–∏–≥–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        else:
            await m.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.")
            return
        orders[idx]['done'] = True
        save_data()
    except Exception as e:
        await m.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    sending_signs.pop(admin_id)
    await send_admin_orders_list(admin_id)

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –≤ —Ñ–æ–Ω–µ ---

async def payment_loop():
    while True:
        await check_all_payments()
        await asyncio.sleep(30)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(payment_loop())
    executor.start_polling(dp, skip_updates=True)
