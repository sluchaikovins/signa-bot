import random
import time
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

API_TOKEN = '8114029445:AAEz00_sHv9VhtfgdT2S3cK6hbJtiJ9dxSM'  # ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

PROMOCODES = {
    'cozyfan': 20
}

user_states = {}
orders = []
ADMIN_ID = 1284710177  # ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

def generate_unique_code():
    return str(random.randint(1000, 9999))

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üîπ –ó–∞–∫–∞–∑–∞—Ç—å —Å–∏–≥–Ω—É", callback_data='order'),
        InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data='history'),
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')
    )
    await message.answer("–ö–ª–∏–∫–∞–π –∫–Ω–æ–ø–æ—á–∫–∏ üëá", reply_markup=keyboard)

@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    
    if not orders:
        return await message.reply("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
    
    text = "üì¶ –ó–∞–∫–∞–∑—ã:\n\n"
    for i, order in enumerate(orders, 1):
        text += (
            f"{i}) üë§ @{order['username']}\n"
            f"‚Ä¢ –°—Ç–∏–ª—å: {order['style']}\n"
            f"‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç: {order['content']}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {order['price']}‚ÇΩ\n"
            f"‚Ä¢ –û–ø–ª–∞—á–µ–Ω–æ: {'‚úÖ –î–∞' if order['paid'] else '‚ùå –ù–µ—Ç'}\n"
            f"‚Ä¢ –ö–æ–¥: {order['code']}\n\n"
        )
    await message.reply(text)

@dp.callback_query_handler(lambda c: c.data in ['order', 'history', 'help'])
async def main_menu(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    action = callback_query.data
    if action == 'order':
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("cozzych", callback_data='from_cozzych')
        )
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–∏–≥–Ω—É üëá", reply_markup=keyboard)
    elif action == 'history':
        await bot.send_message(callback_query.from_user.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. –ó–∞–∫–∞–∂–∏ –ø–µ—Ä–≤—É—é —Å–∏–≥–Ω—É!")
    elif action == 'help':
        await bot.send_message(callback_query.from_user.id, "–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–ª–∞–µ—Ç —Å–∏–≥–Ω—ã. –ù–∞–∂–º–∏ '–ó–∞–∫–∞–∑–∞—Ç—å —Å–∏–≥–Ω—É' –∏ –≤–≤–µ–¥–∏ –∏–º—è.")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'from_cozzych')
async def choose_variant(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üß• –û—Å–≤–µ—â–µ–Ω–∏–µ —Å –æ–¥–µ–∂–¥–æ–π 1 ‚Äî 100‚ÇΩ", callback_data='style_1'),
        InlineKeyboardButton("üëï –û—Å–≤–µ—â–µ–Ω–∏–µ —Å –æ–¥–µ–∂–¥–æ–π 2 ‚Äî 120‚ÇΩ", callback_data='style_2')
    )
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ —Å –æ–¥–µ–∂–¥–æ–π üëá", reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('style_'))
async def ask_for_text(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    user_id = callback_query.from_user.id
    style = callback_query.data
    price = 100 if style == 'style_1' else 120

    user_states[user_id] = {
        'stage': 'waiting_text',
        'style': style,
        'price': price
    }

    warning = (
        "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–≥–Ω—ã (–º–∞–∫—Å. 64 —Å–∏–º–≤–æ–ª–∞) –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ A4.\n\n"
        "‚ùóÔ∏è –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç –∑–∞–∫–æ–Ω—ã –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–π —Å–∏–º–≤–æ–ª–∏–∫–∏."
    )
    await bot.send_message(user_id, warning)
    await callback_query.answer()

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get('stage') == 'waiting_text', content_types=['text', 'photo'])
async def handle_text_or_photo(message: types.Message):
    user_id = message.from_user.id
    state = user_states[user_id]

    if message.text and len(message.text) > 64:
        return await message.reply("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞.")

    user_states[user_id]['stage'] = 'promo'
    user_states[user_id]['content'] = message.text if message.text else 'image'

    promo_keyboard = InlineKeyboardMarkup(row_width=2)
    promo_keyboard.add(
        InlineKeyboardButton("‚úÖ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data='enter_promo'),
        InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_promo')
    )
    await message.reply("–ï—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?", reply_markup=promo_keyboard)

@dp.callback_query_handler(lambda c: c.data in ['enter_promo', 'skip_promo'])
async def handle_promo_decision(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    user_id = callback_query.from_user.id
    state = user_states[user_id]

    if callback_query.data == 'enter_promo':
        user_states[user_id]['stage'] = 'waiting_promo'
        back_btn = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_promo_choice')
        )
        await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=back_btn)
    elif callback_query.data == 'skip_promo':
        await show_final_summary(user_id, state['price'])
        await ask_for_payment(user_id, state['price'])

@dp.callback_query_handler(lambda c: c.data == 'back_to_promo_choice')
async def back_to_promo_menu(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    user_states[callback_query.from_user.id]['stage'] = 'promo'
    promo_keyboard = InlineKeyboardMarkup(row_width=2)
    promo_keyboard.add(
        InlineKeyboardButton("‚úÖ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data='enter_promo'),
        InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_promo')
    )
    await bot.send_message(callback_query.from_user.id, "–ï—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?", reply_markup=promo_keyboard)

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get('stage') == 'waiting_promo')
async def apply_promo(msg: types.Message):
    user_id = msg.from_user.id
    state = user_states[user_id]
    promo = msg.text.strip().lower()
    discount = PROMOCODES.get(promo)

    if discount:
        final_price = max(state['price'] - discount, 0)
        await msg.reply(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! (‚Äì{discount}‚ÇΩ)")
    else:
        await msg.reply("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –û—Å—Ç–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        back_btn = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_promo_choice')
        )
        await msg.reply("–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥:", reply_markup=back_btn)
        return

    await show_final_summary(user_id, final_price)
    await ask_for_payment(user_id, final_price)
    user_states[user_id]['stage'] = 'done'

async def show_final_summary(user_id, final_price):
    content = user_states[user_id]['content']
    style = user_states[user_id]['style']
    style_name = "üß• –û—Å–≤–µ—â–µ–Ω–∏–µ 1" if style == 'style_1' else "üëï –û—Å–≤–µ—â–µ–Ω–∏–µ 2"
    await bot.send_message(user_id,
        f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n"
        f"‚Ä¢ –°—Ç–∏–ª—å: {style_name}\n"
        f"‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç: {'–¢–µ–∫—Å—Ç' if content != 'image' else '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}\n"
        f"‚Ä¢ –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {final_price}‚ÇΩ\n\n"
        f"üîú –û–∂–∏–¥–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω—ã."
    )

async def ask_for_payment(user_id, amount):
    code = generate_unique_code()
    user_states[user_id]['payment_code'] = code
    user_states[user_id]['payment_amount'] = amount
    user_states[user_id]['payment_start'] = int(time.time())
    user_states[user_id]['stage'] = 'waiting_payment'

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    orders.append({
        'user_id': user_id,
        'username': (await bot.get_chat(user_id)).username or '–Ω–µ—Ç username',
        'style': "–û—Å–≤–µ—â–µ–Ω–∏–µ 1" if user_states[user_id]['style'] == 'style_1' else "–û—Å–≤–µ—â–µ–Ω–∏–µ 2",
        'content': user_states[user_id]['content'],
        'price': amount,
        'code': code,
        'paid': False
    })

    pay_keyboard = InlineKeyboardMarkup(row_width=1)
    pay_keyboard.add(
        InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data='confirm_payment')
    )

    await bot.send_message(user_id,
        f"üí∏ –û–ø–ª–∞—Ç–∏—Ç–µ {amount}‚ÇΩ –Ω–∞ DonatePay\n\n"
        f"‚ö†Ô∏è –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥: {code}\n\n"
        f"‚è≥ –£ —Ç–µ–±—è 10 –º–∏–Ω—É—Ç. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥.",
        reply_markup=pay_keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'confirm_payment')
async def confirm_payment(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    user_id = callback_query.from_user.id
    state = user_states.get(user_id)

    # –°—á–∏—Ç–∞–µ–º –æ–ø–ª–∞—Ç—É –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–æ–π
    for order in orders:
        if order['user_id'] == user_id and order['code'] == state['payment_code']:
            order['paid'] = True
            break

    await bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑.")
    await callback_query.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
