import json
import random
import time
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

API_TOKEN = '8114029445:AAEz00_sHv9VhtfgdT2S3cK6hbJtiJ9dxSM'
ADMIN_ID = 1284710177 # ‚Üê –¢–≤–æ–π Telegram ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

PROMOCODES = {'cozyfan': 20}
user_states = {}
ORDERS_FILE = 'orders.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤
try:
    with open(ORDERS_FILE, 'r', encoding='utf-8') as f:
        orders = json.load(f)
except FileNotFoundError:
    orders = []

# /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("üîπ –ó–∞–∫–∞–∑–∞—Ç—å —Å–∏–≥–Ω—É", callback_data='order'),
        InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data='history'),
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')
    )
    await message.answer("–ö–ª–∏–∫–∞–π –∫–Ω–æ–ø–æ—á–∫–∏ üëá", reply_markup=keyboard)

# /admin
@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    if not orders:
        await message.answer("‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    text = "üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n"
    for i, order in enumerate(reversed(orders[-10:]), 1):
        text += (
            f"\nüîπ –ó–∞–∫–∞–∑ #{i}\n"
            f"üë§ User: {order['user_id']}\n"
            f"‚Ä¢ –°—Ç–∏–ª—å: {order['style']}\n"
            f"‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç: {order['content']}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {order['price']}‚ÇΩ\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –û–ø–ª–∞—á–µ–Ω–æ' if order['paid'] else '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'}\n"
        )
    await message.answer(text)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data in ['order', 'history', 'help'])
async def main_menu(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    if c := callback_query.data == 'order':
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("cozzych", callback_data='from_cozzych')
        )
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–∏–≥–Ω—É üëá", reply_markup=keyboard)
    elif c == 'history':
        await bot.send_message(callback_query.from_user.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
    elif c == 'help':
        await bot.send_message(callback_query.from_user.id, "–ù–∞–∂–º–∏ '–ó–∞–∫–∞–∑–∞—Ç—å —Å–∏–≥–Ω—É' –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")
    await callback_query.answer()

# –í—ã–±–æ—Ä –æ–¥–µ–∂–¥—ã
@dp.callback_query_handler(lambda c: c.data == 'from_cozzych')
async def choose_style(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üß• –û—Å–≤–µ—â–µ–Ω–∏–µ —Å –æ–¥–µ–∂–¥–æ–π 1 ‚Äî 100‚ÇΩ", callback_data='style_1'),
        InlineKeyboardButton("üëï –û—Å–≤–µ—â–µ–Ω–∏–µ —Å –æ–¥–µ–∂–¥–æ–π 2 ‚Äî 120‚ÇΩ", callback_data='style_2')
    )
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å üëá", reply_markup=keyboard)

# –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ
@dp.callback_query_handler(lambda c: c.data.startswith('style_'))
async def ask_for_text(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    user_id = callback_query.from_user.id
    style = callback_query.data
    price = 100 if style == 'style_1' else 120
    user_states[user_id] = {'stage': 'waiting_text', 'style': style, 'price': price}
    await bot.send_message(user_id, (
        "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–≥–Ω—ã (–¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ A4.\n"
        "‚ùóÔ∏è –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è."
    ))

@dp.message_handler(content_types=['text', 'photo'])
async def handle_content(message: types.Message):
    user_id = message.from_user.id
    state = user_states.get(user_id)
    if not state or state.get('stage') != 'waiting_text':
        return await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–∞–∑–∞—Ç—å —Å–∏–≥–Ω—É'.")
    if message.text and len(message.text) > 64:
        return await message.reply("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –î–æ 64 —Å–∏–º–≤–æ–ª–æ–≤.")
    user_states[user_id]['stage'] = 'promo'
    user_states[user_id]['content'] = message.text if message.text else 'image'
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data='enter_promo'),
        InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_promo')
    )
    await message.reply("–ï—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?", reply_markup=keyboard)

# –í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.callback_query_handler(lambda c: c.data in ['enter_promo', 'skip_promo'])
async def promo_flow(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    user_id = callback_query.from_user.id
    if callback_query.data == 'enter_promo':
        user_states[user_id]['stage'] = 'waiting_promo'
        back_keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='skip_promo')
        )
        await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=back_keyboard)
    else:
        price = user_states[user_id]['price']
        await show_summary(user_id, price)
        await ask_payment(user_id, price)
    await callback_query.answer()

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get('stage') == 'waiting_promo')
async def apply_promo(msg: types.Message):
    user_id = msg.from_user.id
    promo = msg.text.strip().lower()
    discount = PROMOCODES.get(promo)
    if discount:
        new_price = max(user_states[user_id]['price'] - discount, 0)
        await msg.reply(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –°–∫–∏–¥–∫–∞ {discount}‚ÇΩ (‚àí{discount})")
        await show_summary(user_id, new_price)
        await ask_payment(user_id, new_price)
    else:
        await msg.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏ '–ù–∞–∑–∞–¥'.")

# –í—ã–≤–æ–¥ –∑–∞–∫–∞–∑–∞
async def show_summary(user_id, final_price):
    content = user_states[user_id]['content']
    style = user_states[user_id]['style']
    style_name = "üß• –û—Å–≤–µ—â–µ–Ω–∏–µ 1" if style == 'style_1' else "üëï –û—Å–≤–µ—â–µ–Ω–∏–µ 2"
    await bot.send_message(user_id,
        f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n"
        f"‚Ä¢ –°—Ç–∏–ª—å: {style_name}\n"
        f"‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç: {'–¢–µ–∫—Å—Ç' if content != 'image' else '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}\n"
        f"‚Ä¢ –¶–µ–Ω–∞: {final_price}‚ÇΩ")

# –û–ø–ª–∞—Ç–∞
async def ask_payment(user_id, amount):
    code = str(random.randint(1000, 9999))
    user_states[user_id].update({
        'stage': 'waiting_payment',
        'payment_code': code,
        'payment_amount': amount,
        'payment_start': int(time.time())
    })
    orders.append({
        'user_id': user_id,
        'style': user_states[user_id]['style'],
        'content': user_states[user_id]['content'],
        'price': amount,
        'paid': False,
        'code': code
    })
    with open(ORDERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(orders, f, ensure_ascii=False, indent=2)

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data='pay_now')
    )
    await bot.send_message(user_id, f"–ò—Ç–æ–≥: {amount}‚ÇΩ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –æ–ø–ª–∞—Ç—É:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'pay_now')
async def payment_instructions(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    user_id = callback_query.from_user.id
    code = user_states[user_id]['payment_code']
    amount = user_states[user_id]['payment_amount']
    await bot.send_message(user_id,
        f"üí∏ –û–ø–ª–∞—Ç–∏—Ç–µ {amount}‚ÇΩ –Ω–∞ DonatePay\n\n"
        f"‚ö†Ô∏è –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥: {code}\n\n"
        f"‚è≥ –£ —Ç–µ–±—è 10 –º–∏–Ω—É—Ç. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥.")
    await callback_query.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
